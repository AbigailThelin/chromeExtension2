{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selectors","openColor","addSelectors","bind","assertThisInitialized","changeColor","changePopupColor","removeSelector","setState","concat","toConsumableArray","number","color","Math","random","toString","OpenColor","i","console","log","array","index","indexOf","splice","_this2","react_default","a","createElement","className","map","type","value","onClick","lib_default","defaultColor","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OA6EeA,sBAxEb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAM,CACTC,UAAU,GACVC,WAAW,GAEbT,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACpBA,EAAKa,YAAcb,EAAKa,YAAYF,KAAjBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACnBA,EAAKc,iBAAmBd,EAAKc,iBAAiBH,KAAtBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACxBA,EAAKe,eAAiBf,EAAKe,eAAeJ,KAApBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KATXA,8EAaXG,KAAKa,SAAS,CAACR,UAAS,GAAAS,OAAAhB,OAAAiB,EAAA,EAAAjB,CAAME,KAAKI,MAAMC,WAAjB,CAA4B,CAACW,OAAQhB,KAAKI,MAAMC,YAAaY,MAAO,KAAmB,SAAdC,KAAKC,UAAmB,GAAGC,SAAS,+CAIrIpB,KAAKa,SAAS,CAACP,WAAYN,KAAKI,MAAMiB,qDAGvBC,GACfC,QAAQC,IAAIF,0CAGCA,GACb,IAAIG,EAAQzB,KAAKI,MAAMC,UACnBqB,EAAQD,EAAME,QAAQL,GACtBI,GAAS,GACXD,EAAMG,OAAOF,EAAO,GAEtB1B,KAAKa,SAAS,CAACR,UAAWoB,qCAGnB,IAAAI,EAAA7B,KACP,OACE8B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,gCACChC,KAAKI,MAAMC,UAAU6B,IAAI,SAAAZ,GACxB,OACEQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,SAAOG,KAAK,QAAQC,MAAOd,EAAEL,MAAOoB,QAAS,kBAAMR,EAAKnB,eAEtDmB,EAAKzB,MAAME,UACPwB,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CACEQ,aAAcjB,EAAEL,QAKlB,KACNa,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOK,YAAY,0BAC/BV,EAAAC,EAAAC,cAAA,QACEK,QAAS,kBAAMR,EAAKjB,eAAeU,IACnCW,UAAU,UAFZ,WAQNH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QACEK,QAAS,kBAAMR,EAAKtB,gBACpB0B,UAAU,gBAFZ,2BA7DQQ,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.61c2b6cb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ColorPicker from 'rc-color-picker';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={\n      selectors:[],\n      openColor: false\n    }\n    this.addSelectors = this.addSelectors.bind(this);\n    this.changeColor = this.changeColor.bind(this);\n    this.changePopupColor = this.changePopupColor.bind(this);\n    this.removeSelector = this.removeSelector.bind(this);\n  }\n\n  addSelectors() {\n    this.setState({selectors: [...this.state.selectors, {number: this.state.selectors++, color: '#'+(Math.random()*0xFFFFFF<<0).toString(16)}]});\n  }\n\n  changeColor() {\n    this.setState({openColor: !this.state.OpenColor});\n  }\n\n  changePopupColor(i) {\n    console.log(i)\n  }\n\n  removeSelector(i){\n    var array = this.state.selectors;\n    var index = array.indexOf(i);\n    if (index > -1) {\n      array.splice(index, 1);\n    }\n    this.setState({selectors: array});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <p>Your CSS Selectors!</p>\n        {this.state.selectors.map(i => {\n          return (\n            <div className=\"selector-container\">\n              <input type='color' value={i.color} onClick={() => this.changeColor} />\n              {\n                this.state.openColor ? \n                    <ColorPicker\n                      defaultColor={i.color}\n                      // onChange={() => this.changePopupColor(i)}\n                      // alpha={30}\n                      // placement=\"bottomLeft\"\n                    />\n                  : null}\n              <input type=\"text\" placeholder='put css selector here'/>\n              <span \n                onClick={() => this.removeSelector(i)} \n                className=\"remove\">\n                  &times;\n              </span>\n            </div>\n          )\n        })}\n        <div>\n          <span \n            onClick={() => this.addSelectors()}\n            className=\"add-selector\"  \n          >\n            + Add Selector\n          </span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}